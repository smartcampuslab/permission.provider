<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2012-2013 Trento RISE Licensed under the Apache License, Version 
	2.0 (the "License"); you may not use this file except in compliance with 
	the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util"

	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <mvc:annotation-driven/>
    
    <!-- Scan controllers in this package -->
    <context:component-scan
        base-package="eu.trentorise.smartcampus.permissionprovider" />
    
    <!-- REST SERVICES EXPOSED BY THE AAC -->
    <sec:http pattern="/basicprofile/**"  create-session="never" entry-point-ref="clientAuthenticationEntryPoint" >
        <sec:intercept-url method="OPTIONS" pattern="/basicprofile/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <sec:intercept-url  pattern="/basicprofile/**" access="IS_AUTHENTICATED_FULLY" />
        <sec:custom-filter ref="resourceFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>
    <sec:http pattern="/accountprofile/**" create-session="never" entry-point-ref="clientAuthenticationEntryPoint" >
        <sec:intercept-url method="OPTIONS"  pattern="/accountprofile/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <sec:intercept-url  pattern="/accountprofile/**" access="IS_AUTHENTICATED_FULLY" />
        <sec:custom-filter ref="resourceFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>
    
    <sec:authentication-manager alias="authenticationManager">
	    <sec:authentication-provider 
	      user-service-ref="clientDetailsUserService" />
      <sec:authentication-provider 
        user-service-ref="internalUserDetailsService">
         <sec:password-encoder ref="internalPasswordEncoder">
        </sec:password-encoder>    
       </sec:authentication-provider> 
	  </sec:authentication-manager>
<!--    
    <sec:authentication-manager alias="userAuthenticationManager">
      <sec:authentication-provider 
        user-service-ref="internalUserDetailsService">
         <sec:password-encoder ref="internalPasswordEncoder">
        </sec:password-encoder>    
       </sec:authentication-provider> 
    </sec:authentication-manager>
-->    
	<sec:http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="authenticationManager">
		<sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sec:anonymous enabled="false" />
		<sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>

	<sec:http pattern="/internal/register/rest" create-session="stateless"
    authentication-manager-ref="authenticationManager" >
    <sec:intercept-url pattern="/internal/register/rest" access="IS_AUTHENTICATED_FULLY" />
    <sec:anonymous enabled="false" />
    <sec:custom-filter ref="clientCredentialsFilter" after="BASIC_AUTH_FILTER" />
    <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
    <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
  </sec:http>
  <bean id="clientCredentialsFilter"
    class="eu.trentorise.smartcampus.permissionprovider.oauth.ClientCredentialsFilter">
		<constructor-arg value="/internal/register/rest"/>
    <property name="authenticationManager" ref="authenticationManager" />
  </bean>
  <bean id="internalUserDetailsService"
    class="eu.trentorise.smartcampus.permissionprovider.oauth.InternalUserDetailsRepo">
  </bean>
  <bean id="internalPasswordEncoder"
    class="eu.trentorise.smartcampus.permissionprovider.oauth.InternalPasswordEncoder">
  </bean>
	
  <sec:http disable-url-rewriting="true" pattern="/admin/**">
        <sec:intercept-url pattern="/admin/**" access="IS_AUTHENTICATED_FULLY" />
        <sec:form-login login-page="/eauth/admin" />
<!--         <sec:logout invalidate-session="true" logout-url="/admin/logout" delete-cookies="JSESSIONID,open_id_session_id" logout-success-url="/admin"/> -->
        <sec:logout invalidate-session="true" logout-url="/admin/logout" success-handler-ref="adminCookieCleaner" />
    </sec:http>

    <bean id="redirectLogoutHandler" class="eu.trentorise.smartcampus.permissionprovider.controller.RedirectLogoutSuccessHandler">
        <constructor-arg value="JSESSIONID,open_id_session_id,_shibsession"/>
        <constructor-arg value="target"/>
    </bean>
    <bean id="adminCookieCleaner" class="eu.trentorise.smartcampus.permissionprovider.controller.CookieCleaner">
        <constructor-arg value="JSESSIONID,open_id_session_id,_shibsession"/>
        <constructor-arg value="/admin"/>
    </bean>

    <sec:http disable-url-rewriting="true" pattern="/cas/loginsuccess">
        <sec:intercept-url pattern="/cas/loginsuccess" access="IS_AUTHENTICATED_FULLY" />
        <sec:form-login login-page="/eauth/cas"/>
        <sec:logout invalidate-session="true" logout-url="/caslogout" delete-cookies="JSESSIONID,open_id_session_id,vasdevgoogle" logout-success-url="/cas/login"/>
    </sec:http>

    <sec:http disable-url-rewriting="true" pattern="/sso/**">
        <sec:intercept-url pattern="/sso/**" access="IS_AUTHENTICATED_FULLY" />
        <sec:form-login login-page="/eauth/sso" />
        <sec:logout invalidate-session="true" logout-url="/ssologout" delete-cookies="JSESSIONID,open_id_session_id,vasdevgoogle" logout-success-url="/sso"/>
    </sec:http>
    
	  <sec:http disable-url-rewriting="true">
        <sec:intercept-url pattern="/dev/**" access="IS_AUTHENTICATED_FULLY" />
        <sec:intercept-url pattern="/oauth/**" access="IS_AUTHENTICATED_FULLY" />
        <sec:form-login login-page="/eauth/dev" />
        <sec:logout invalidate-session="true" logout-url="/logout" delete-cookies="JSESSIONID,open_id_session_id,vasdevgoogle" success-handler-ref="redirectLogoutHandler"/>
    </sec:http>
	
	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
	</bean>
	<bean id="forbEntryPoint"
		class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint">
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="eu.trentorise.smartcampus.permissionprovider.oauth.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>

<!-- 	<sec:authentication-manager id="clientAuthenticationManager"> -->
<!-- 		<sec:authentication-provider -->
<!-- 			user-service-ref="clientDetailsUserService" /> -->
<!-- 	</sec:authentication-manager> -->

<!--   <bean id="extAuthProvider" class="eu.trentorise.smartcampus.permissionprovider.oauth.ExtAuthProvider"> -->
<!--     <property name="clientDetailsService" ref="clientDetails"/> -->
<!--   </bean> -->

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="userDetailsService"
		class="eu.trentorise.smartcampus.permissionprovider.oauth.UserDetailsRepo">
	</bean>

	<bean id="tokenStore" class="eu.trentorise.smartcampus.permissionprovider.oauth.AutoJdbcTokenStore">
        <constructor-arg ref="dataSource" />
	</bean>

	<bean id="resourceStorage" class="eu.trentorise.smartcampus.permissionprovider.oauth.CachedResourceStorage"/>
	
	<bean id="tokenServices"
		class="eu.trentorise.smartcampus.permissionprovider.oauth.NonRemovingTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
    <property name="reuseRefreshToken" value="true" />
				<property name="clientDetailsService" ref="clientDetails" />
	</bean>

    <bean id="userApprovalHandler" class="eu.trentorise.smartcampus.permissionprovider.oauth.UserApprovalHandler">
        <property name="tokenServices" ref="tokenServices"/>
    </bean>

	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code authorization-code-services-ref="authorizationCodeServices"/>
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password authentication-manager-ref="authenticationManager" /> 
<!-- 		<oauth:password /> -->
	</oauth:authorization-server>

    <bean id="authorizationCodeServices" class="eu.trentorise.smartcampus.permissionprovider.oauth.AutoJdbcAuthorizationCodeServices">
        <constructor-arg ref="dataSource" />
    </bean>

    <bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">
        <constructor-arg ref="dataSource" />
        <property name="rowMapper">
            <bean class="eu.trentorise.smartcampus.permissionprovider.model.ClientDetailsRowMapper"/>
        </property>
    </bean>
    		
<!-- 	<mvc:default-servlet-handler /> -->

	<!-- Override the default mappings for approval and error pages -->
	<!--Basic application beans. -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<bean
				class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<property name="prefix" value="/WEB-INF/jsp/"></property>
				<property name="suffix" value=".jsp"></property>
			</bean>
		</property>
		<property name="defaultViews">
			<bean
				class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
				<property name="extractValueFromSingleKeyModel" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="authorityHandlerContainer" class="eu.trentorise.smartcampus.permissionprovider.authority.AuthorityHandlerContainer">
	    <constructor-arg>
	        <map>
	            <entry key="googlelocal">
	                <bean id="googleLocalAuthorityHandler" class="eu.trentorise.smartcampus.permissionprovider.authority.GoogleAuthorityHandler">
	                    <constructor-arg value="${google.clientIds}"/>
	                </bean>    
	            </entry>
              <entry key="facebooklocal">
                  <bean id="facebookLocalAuthorityHandler" class="eu.trentorise.smartcampus.permissionprovider.authority.FBAuthorityHandler">
                  </bean>    
              </entry>
	            <entry key="anonymous">
                  <bean id="anonymousAuthorityHandler" class="eu.trentorise.smartcampus.permissionprovider.authority.AnonymousAuthorityHandler"/>
              </entry>
         </map>
	    </constructor-arg>
	</bean>

	<!--  default authority handler -->
	<bean id="defaultHandler" class="eu.trentorise.smartcampus.permissionprovider.authority.DefaultAuthorityHandler">
	    <constructor-arg value="${mode.testing}"></constructor-arg>
	</bean>
	<bean id="socialEngine" class="${social.engine.impl}"/>
		
	<import resource="datalayer.xml"/>

	    <!-- Scheduler refreshing security list -->
    <task:annotation-driven scheduler="taskScheduler" />
    <task:scheduler id="taskScheduler" pool-size="1" />
	
    <bean id="resourceFilter" class="eu.trentorise.smartcampus.resourceprovider.filter.ResourceFilter">
        <property name="authenticationManager" ref="resourceAuthenticationManager"/>
    </bean>
    
    <bean id="resourceAuthenticationManager" class="eu.trentorise.smartcampus.resourceprovider.filter.ResourceAuthenticationManager">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="authServices" ref="authServices"/>
    </bean>

    <bean id="authServices" class="eu.trentorise.smartcampus.resourceprovider.jdbc.JdbcServices">
        <constructor-arg ref="dataSource"/>
    </bean>
	
    <bean id="googleProviderFilterBean" class="eu.trentorise.smartcampus.permissionprovider.auth.google.GoogleProviderFilter"/>
    <bean id="fbProviderFilterBean" class="eu.trentorise.smartcampus.permissionprovider.auth.fb.FBFilter"/>
    <bean id="internalProviderFilterBean" class="eu.trentorise.smartcampus.permissionprovider.auth.internal.InternalRegFilter"/>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" >
        <property name="defaultLocale" value="it" />
    </bean>

		<bean id="templateEngine" class="org.thymeleaf.TemplateEngine">
			<property name="templateResolver">
				<bean id="templateResolver"
					class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
					<property name="prefix" value="/templates/" />
					<property name="suffix" value=".html" />
					<property name="characterEncoding" value="UTF-8"/>
					<property name="templateMode" value="HTML5" />
				</bean>
			</property>
		</bean>

	  <bean id="messageSource"
    class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basename">
      <value>resources/internal</value>
    </property>
  </bean>
</beans>
