<?xml version="1.0" standalone="yes"?>
<!-- Copyright 2012-2013 Trento RISE Licensed under the Apache License, Version 
	2.0 (the "License"); you may not use this file except in compliance with 
	the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
	Unless required by applicable law or agreed to in writing, software distributed 
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
	the specific language governing permissions and limitations under the License. -->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../../../../../jaxb/binding/resourceTemplateSchema.xsd">
	<service name="Basic profile service" id="smartcampus.profile.basicprofie">
		<description>Core service for managing basic user profiles.</description>

		<resourceMapping id="smartcampus.profile.basicprofile.me"
			name="Read user's basic profile" uri="smartcampus.profile.basicprofile.me"
			authority="ROLE_USER">
			<description>Basic profile of the current platform user. Read access only.</description>
		</resourceMapping>
		<resourceMapping id="smartcampus.profile.basicprofile.all"
			name="Read all basic profiles" uri="smartcampus.profile.basicprofile.all"
			authority="ROLE_ANY" approvalRequired="true">
			<description>Basic profile of the platform users. Read access only.</description>
		</resourceMapping>
		<resourceMapping id="smartcampus.profile.accountprofile.me"
			name="Read user's account profile" uri="smartcampus.profile.accountprofile.me"
			authority="ROLE_USER">
			<description>Account profile of the current platform user. Read access only.</description>
		</resourceMapping>
		<resourceMapping id="smartcampus.profile.accountprofile.all"
			name="Read all account profiles" uri="smartcampus.profile.accountprofile.all"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Account profile of the platform users. Read access only.</description>
		</resourceMapping>
	</service>

	<service name="Extended profile service" id="smartcampus.profile.extprofie">
		<description>Core service for managing —Åustom user profiles defined by different applications.</description>
		<resource name="Profile" id="profile">
			<description>Extended profile name</description>
		</resource>

		<resourceMapping id="smartcampus.extprofile.own" name="Manage profile"
			uri="smartcampus.extprofile.write.{profile}" authority="ROLE_CLIENT"
			accessibleByOthers="false">
			<description>Write the profile '{profile}'.</description>
		</resourceMapping>

		<resourceMapping id="smartcampus.extprofile.me.read"
			name="Read all user profiles" uri="smartcampus.extprofile.me.read"
			authority="ROLE_USER" approvalRequired="true">
			<description>Read all custom profiles of the current user.</description>
		</resourceMapping>
		<resourceMapping id="smartcampus.extprofile.me.app.profile.read"
			name="Read specific user profile" uri="smartcampus.extprofile.me.{profile}.read"
			authority="ROLE_USER" approvalRequired="true">
			<description>Read custom profile '{profile}' of the current user.</description>
		</resourceMapping>
		<resourceMapping id="smartcampus.extprofile.me.app.profile.write"
			name="Write specific user profile" uri="smartcampus.extprofile.me.{profile}.write"
			authority="ROLE_USER" approvalRequired="true">
			<description>Write custom profile '{profile}' of the current user.</description>
		</resourceMapping>

		<resourceMapping id="smartcampus.extprofile.shared.read"
			name="Read all profiles shared with user" uri="smartcampus.extprofile.shared.read"
			authority="ROLE_USER" approvalRequired="true">
			<description>Read all custom profiles shared with the current user.</description>
		</resourceMapping>
		<resourceMapping id="smartcampus.extprofile.shared.app.profile.read"
			name="Read specific profiles shared with user" uri="smartcampus.extprofile.shared.{profile}.read"
			authority="ROLE_USER" approvalRequired="true">
			<description>Read custom profile '{profile}' shared with the current user.</description>
		</resourceMapping>

		<resourceMapping id="smartcampus.extprofile.all.read"
			name="Read all profiles" uri="smartcampus.extprofile.all.read"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Read all custom profiles.</description>
		</resourceMapping>
		<resourceMapping id="smartcampus.extprofile.all.app.profile.read"
			name="Read specific profiles" uri="smartcampus.extprofile.all.{profile}.read"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Read custom profiles '{profile}'.</description>
		</resourceMapping>
	</service>

	<service name="File storage service" id="smartcampus.filestorage">
		<description>Service for storing user files through different cloud storages.</description>
		<resource name="App" id="fsapp">
			<description>Symbolic name of the application managing the resources. Corresponds to the app 'folder'.</description>
		</resource>
		<resourceMapping id="filestorage.storage" name="Storage management"
			uri="filestorage.storage.{fsapp}" authority="ROLE_CLIENT"
			accessibleByOthers="false">
			<description>Manage different cloud storage accounts of the app '{fsapp}'.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.useraccount" name="Account management"
			uri="filestorage.account.app.{fsapp}" authority="ROLE_CLIENT"
			accessibleByOthers="false">
			<description>Manage different user accounts of the app '{fsapp}'.</description>
		</resourceMapping>
		<resourceMapping id="filestorage.useraccount.user"
			name="Account management by user" uri="filestorage.account.user.{fsapp}"
			authority="ROLE_USER" accessibleByOthers="false">
			<description>Manage user accounts of the app '{fsapp}' for current user.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.metadata.user"
			name="Read user resource metadata of the application by the user"
			uri="filestorage.metadata.user.{fsapp}.read" authority="ROLE_USER"
			approvalRequired="true">
			<description>Read user resource metadata of the application by the user.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.metadata.app"
			name="Read resource metadata of the application by the application"
			uri="filestorage.metadata.app.{fsapp}.read" authority="ROLE_CLIENT"
			approvalRequired="true">
			<description>Read resource metadata of the application by the application.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.resource.app.manage"
			name="Manage resource of an application" uri="filestorage.resource.app.{fsapp}.manage"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Manage user files of the app {fsapp}.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.resource.user.manage"
			name="Manage resource of an application by a user" uri="filestorage.resource.user.{fsapp}.manage"
			authority="ROLE_USER" approvalRequired="true">
			<description>Manage user files of the app {fsapp}.</description>
		</resourceMapping>


		<resourceMapping id="filestorage.resource.app.read"
			name="Read a resource owned by the user stored in the application by other application"
			uri="filestorage.resource.app.{fsapp}.read" authority="ROLE_CLIENT"
			approvalRequired="true">
			<description>Read user files of the app '{fsapp}'.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.resource.user.read"
			name="Read own resource of a user stored in the application" uri="filestorage.resource.user.{fsapp}.read"
			authority="ROLE_USER" approvalRequired="true">
			<description>Read own user files of the app '{fsapp}'.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.sharedresource.app.read"
			name="Read a shared resource of a user stored in the application by other application"
			uri="filestorage.sharedresource.app.{fsapp}.read" authority="ROLE_CLIENT"
			approvalRequired="true">
			<description>Read files shared with the user of the app '{fsapp}'.</description>
		</resourceMapping>

		<resourceMapping id="filestorage.sharedresource.user.read"
			name="Read a resource of a user stored in the application" uri="filestorage.sharedresource.user.{fsapp}.read"
			authority="ROLE_USER" approvalRequired="true">
			<description>Read files shared with the user of the app '{fsapp}'.</description>
		</resourceMapping>

	</service>

	<service name="Communicator service" id="smartcampus.communicator">
		<description>Service manage notification</description>
		<resource name="App" id="capp">
			<description>Symbolic name of the application managing the notifications</description>
		</resource>

		<resourceMapping id="communicator.msg.read" name="Read an arbitrary user message"
			uri="communicator.msg.read" authority="ROLE_USER" approvalRequired="false">
			<description>Read an arbitrary user notification.</description>
		</resourceMapping>
		<resourceMapping id="communicator.msg.write" name="Manage an arbitrary user message"
			uri="communicator.msg.write" authority="ROLE_USER" approvalRequired="false">
			<description>Manage an arbitrary user notification.</description>
		</resourceMapping>
		<resourceMapping id="communicator.app.msg.read"
			name="Read a user message of the app '{capp}'" uri="communicator.app.msg.read.{capp}"
			authority="ROLE_USER" approvalRequired="false">
			<description>Read a user message of the app '{capp}'.</description>
		</resourceMapping>
		<resourceMapping id="communicator.app.msg.write"
			name="Manage a user message of the app '{capp}'" uri="communicator.app.msg.write.{capp}"
			authority="ROLE_USER" approvalRequired="false">
			<description>Manage a user message of the app '{capp}'.</description>
		</resourceMapping>
		<resourceMapping id="communicator.user.msg.read"
			name="Read an arbitrary message generated by user" uri="communicator.user.msg.read"
			authority="ROLE_USER" approvalRequired="false">
			<description>Read an arbitrary user notification generated by other users.</description>
		</resourceMapping>
		<resourceMapping id="communicator.user.msg.write"
			name="Manage an arbitrary message generated by user" uri="communicator.user.msg.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Manage an arbitrary user notification generated by other users.</description>
		</resourceMapping>


		<resourceMapping id="communicator.send.user" name="Send notification as user"
			uri="communicator.send.user" authority="ROLE_USER" approvalRequired="false">
			<description>Send a notification to users from user.</description>
		</resourceMapping>
		<resourceMapping id="communicator.send.app"
			name="Send notification as app '{capp}'" uri="communicator.send.app.{capp}"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Send a notification to users from the app '{capp}'.</description>
		</resourceMapping>

		<resourceMapping id="communicator.register.app"
			name="Register push notification app '{capp}'" uri="communicator.register.{capp}"
			authority="ROLE_CLIENT" accessibleByOthers="false" approvalRequired="false">
			<description>Register data of the app '{capp}'.</description>
		</resourceMapping>

		<resourceMapping id="communicator.register.user"
			name="Push notification configuration for the app '{capp}'." uri="communicator.register.user.{capp}"
			authority="ROLE_USER" accessibleByOthers="false" approvalRequired="false">
			<description>Manage user push notification configuration for the app '{capp}'.</description>
		</resourceMapping>

	</service>


	<service name="Social networking service" id="smartcampus.socialservice">
		<description>Service manage notification</description>
		<resource name="Community" id="cid">
			<description>Identificator of the community managed by the app</description>
		</resource>

		<resourceMapping id="socialservice.user.group.read"
			name="Read user groups" uri="socialservice.user.group.read"
			authority="ROLE_USER" approvalRequired="false">
			<description>Read user groups.</description>
		</resourceMapping>
		<resourceMapping id="socialservice.user.group.write"
			name="Manage user groups" uri="socialservice.user.group.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Manage user groups.</description>
		</resourceMapping>

		<resourceMapping id="socialservice.user.community.read"
			name="Read user communities" uri="socialservice.user.community.read"
			authority="ROLE_USER" approvalRequired="false">
			<description>Read user communities.</description>
		</resourceMapping>
		<resourceMapping id="socialservice.user.community.write"
			name="Manage user communities" uri="socialservice.user.community.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Manage user communities.</description>
		</resourceMapping>

		<resourceMapping id="socialservice.community.all"
			name="Read communities" uri="socialservice.community.all" authority="ROLE_ANY"
			approvalRequired="false">
			<description>Read communities.</description>
		</resourceMapping>
		<resourceMapping id="socialservice.community.write"
			name="Manage community '{cid}'" uri="socialservice.community.{cid}.write"
			authority="ROLE_CLIENT" accessibleByOthers="false">
			<description>Manage community '{cid}'.</description>
		</resourceMapping>

		<resourceMapping id="socialservice.user.entities.read"
			name="Read user entities" uri="socialservice.user.entities.read"
			authority="ROLE_USER" approvalRequired="false">
			<description>Read user entities.</description>
		</resourceMapping>
		<resourceMapping id="socialservice.user.entities.write"
			name="Manage user entities" uri="socialservice.user.entities.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Manage user entities.</description>
		</resourceMapping>

		<resourceMapping id="socialservice.user.shared.read"
			name="Read entities shared with the user" uri="socialservice.user.shared.read"
			authority="ROLE_USER" approvalRequired="false">
			<description>Read entities shared with the user.</description>
		</resourceMapping>
		<resourceMapping id="socialservice.user.shared.write"
			name="Share/unshare user entities" uri="socialservice.user.shared.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Share/unshare user entities.</description>
		</resourceMapping>

		<resourceMapping id="socialservice.community.entities.read"
			name="Read community '{cid}' entities" uri="socialservice.community.{cid}.entities.read"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Read community '{cid}' entities.</description>
		</resourceMapping>
		<resourceMapping id="socialservice.community.entities.write"
			name="Manage community '{cid}' entities" uri="socialservice.community.{cid}.entities.write"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Manage community '{cid}' entities.</description>
		</resourceMapping>


		<resourceMapping id="socialservice.community.shared.read"
			name="Read entities shared with the community '{cid}'" uri="socialservice.community.{cid}.shared.read"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Read entities shared with the community '{cid}'.</description>
		</resourceMapping>
		<resourceMapping id="socialservice.community.shared.write"
			name="Share/unshare community '{cid}' entities" uri="socialservice.community.{cid}.shared.write"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Share/unshare community '{cid}' entities.</description>
		</resourceMapping>

		<resourceMapping id="socialservice.type.all" name="Manage entity types"
			uri="socialservice.type.all" authority="ROLE_ANY" approvalRequired="false">
			<description>Manage entity types</description>
		</resourceMapping>
	</service>

	<service name="Mobility service" id="smartcampus.mobilityservice">
		<description>Transportation information and route planning.</description>

		<resourceMapping id="mobilityservice.data" name="Read mobility data"
			uri="mobilityservice.data" authority="ROLE_ANY" approvalRequired="false">
			<description>Access mobility information (timetables, parkings, real time data, etc.)</description>
		</resourceMapping>

		<resourceMapping id="mobilityservice.plan" name="Multimodal route planning"
			uri="mobilityservice.plan" authority="ROLE_ANY" approvalRequired="true">
			<description>Multimodal route planning.</description>
		</resourceMapping>

		<resourceMapping id="mobilityservice.user.itinerary.read"
			name="Read user trips" uri="mobilityservice.user.itinerary.read"
			authority="ROLE_USER" approvalRequired="false">
			<description>Read saved user trip data (single and recurrent trips).</description>
		</resourceMapping>

		<resourceMapping id="mobilityservice.user.itinerary.write"
			name="Write user trips" uri="mobilityservice.user.itinerary.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Create and modify user trip data (single and recurrent trips).</description>
		</resourceMapping>

		<resourceMapping id="mobilityservice.user.alert" name="Send transport alerts as user"
			uri="mobilityservice.user.alert" authority="ROLE_USER"
			approvalRequired="false">
			<description>Send different transport alerts on behalf of the user.</description>
		</resourceMapping>

		<resourceMapping id="mobilityservice.service.alert"
			name="Send transport alerts" uri="mobilityservice.service.alert"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Send different transport alerts.</description>
		</resourceMapping>
	</service>

	<service name="Territory service" id="smartcampus.territoryservice">
		<description>Territory information about events, places, and itineraries.</description>

		<resourceMapping id="territoryservice.data.read" name="Read territory data"
			uri="territoryservice.data.read" authority="ROLE_ANY"
			approvalRequired="false">
			<description>Access territory information (events, places, stories, their search, etc.)</description>
		</resourceMapping>

		<resourceMapping id="territoryservice.data.user.write"
			name="Write territory data" uri="territoryservice.data.user.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Create and modify events, places, and stories on behalf of the user</description>
		</resourceMapping>

		<resourceMapping id="territoryservice.communitydata.write"
			name="Personalize territory data" uri="territoryservice.communitydata.write"
			authority="ROLE_USER" approvalRequired="false">
			<description>Add personal information to the territory data, such as ratings, participation, etc.</description>
		</resourceMapping>

	</service>

	<service name="Unidata service" id="smartcampus.unidataservice">
		<description>Information about students.</description>
		<resourceMapping id="smartcampus.unidataservice.studentdata.me"
			name="Student data" uri="smartcampus.unidataservice.studentdata.me"
			authority="ROLE_USER" approvalRequired="false">
			<description>Get student university data</description>
		</resourceMapping>

		<resourceMapping id="smartcampus.unidataservice.studentexams.me"
			name="Student exams" uri="smartcampus.unidataservice.studentexams.me"
			authority="ROLE_USER" approvalRequired="false">
			<description>Get student exams</description>
		</resourceMapping>

		<resourceMapping id="smartcampus.unidataservice.operacard.me"
			name="Student opera card" uri="smartcampus.unidataservice.operacard.me"
			authority="ROLE_USER" approvalRequired="false">
			<description>Get student Opera Universitaria card</description>
		</resourceMapping>


		<resourceMapping id="smartcampus.unidataservice.studentdata.app"
			name="Student data" uri="smartcampus.unidataservice.studentdata.app"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Get student university data</description>
		</resourceMapping>

		<resourceMapping id="smartcampus.unidataservice.studentexams.app"
			name="Student exams" uri="smartcampus.unidataservice.studentexams.app"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Get student exams</description>
		</resourceMapping>

		<resourceMapping id="smartcampus.unidataservice.operacard.app"
			name="Student opera card" uri="smartcampus.unidataservice.operacard.app"
			authority="ROLE_CLIENT" approvalRequired="true">
			<description>Get student Opera Universitaria card</description>
		</resourceMapping>

	</service>
</services>
